{
  "docker_files": {
    "Dockerfile.backend": "FROM python:3.9-slim-buster AS builder\n\nWORKDIR /app\n\nCOPY backend/requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY backend ./\n\n\nFROM python:3.9-slim-buster\n\nWORKDIR /app\n\nCOPY --from=builder /app ./\n\nCMD [\"uvicorn\", \"src.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]",
    "Dockerfile.frontend": "FROM node:16-alpine AS builder\n\nWORKDIR /app\n\nCOPY frontend/package*.json ./\nRUN npm install\n\nCOPY frontend ./\nRUN npm run build\n\nFROM nginx:alpine\n\nCOPY --from=builder /app/build /usr/share/nginx/html\n\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]",
    "docker-compose.yml": "version: \"3.8\"\n\nservices:\n  backend:\n    build:\n      context: .\n      dockerfile: Dockerfile.backend\n    ports:\n      - \"8000:8000\"\n    environment:\n      DATABASE_URL: postgresql://user:password@db:5432/dbname\n      BACKEND_CORS_ORIGINS: \"*\"\n    depends_on:\n      - db\n    volumes:\n      - backend_data:/app\n\n  frontend:\n    build:\n      context: .\n      dockerfile: Dockerfile.frontend\n    ports:\n      - \"3000:80\"\n    depends_on:\n      - backend\n    environment:\n      REACT_APP_API_BASE_URL: \"http://localhost:8000\"\n\n  db:\n    image: postgres:13\n    ports:\n      - \"5432:5432\"\n    environment:\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: dbname\n    volumes:\n      - db_data:/var/lib/postgresql/data\n\nvolumes:\n  db_data:\n  backend_data:"
  },
  "ci_cd_config": {
    ".github/workflows/deploy.yml": "name: Deploy to Kubernetes\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Build and push Docker images\n        id: build-push-images\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          file: Dockerfile.backend\n          push: true\n          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce_backend:latest\n          file: Dockerfile.frontend\n          push: true\n          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce_frontend:latest\n\n  deploy:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up kubectl\n        uses: azure/setup-kubectl@v3\n        with:\n          version: 'v1.21.0'\n\n      - name: Configure Kubernetes credentials\n        run: |\n          echo \"${{ secrets.K8S_CONFIG }}\" | base64 -d > kubeconfig.yaml\n          export KUBECONFIG=$(pwd)/kubeconfig.yaml\n\n      - name: Deploy to Kubernetes\n        run: |\n          kubectl apply -f k8s_manifests/deployment.yaml\n          kubectl apply -f k8s_manifests/service.yaml\n          kubectl apply -f k8s_manifests/ingress.yaml"
  },
  "k8s_manifests": {
    "deployment.yaml": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ecommerce-backend\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: ecommerce-backend\n  template:\n    metadata:\n      labels:\n        app: ecommerce-backend\n    spec:\n      containers:\n        - name: ecommerce-backend\n          image: <dockerhub_username>/ecommerce_backend:latest\n          ports:\n            - containerPort: 8000\n          env:\n            - name: DATABASE_URL\n              value: postgresql://user:password@ecommerce-db-service:5432/dbname\n            - name: BACKEND_CORS_ORIGINS\n              value: \"*\"\n\n---\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ecommerce-frontend\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: ecommerce-frontend\n  template:\n    metadata:\n      labels:\n        app: ecommerce-frontend\n    spec:\n      containers:\n        - name: ecommerce-frontend\n          image: <dockerhub_username>/ecommerce_frontend:latest\n          ports:\n            - containerPort: 80\n          env:\n            - name: REACT_APP_API_BASE_URL\n              value: \"http://ecommerce-backend-service:8000\"",
    "service.yaml": "apiVersion: v1\nkind: Service\nmetadata:\n  name: ecommerce-backend-service\nspec:\n  selector:\n    app: ecommerce-backend\n  ports:\n    - protocol: TCP\n      port: 8000\n      targetPort: 8000\n  type: ClusterIP\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: ecommerce-frontend-service\nspec:\n  selector:\n    app: ecommerce-frontend\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n  type: LoadBalancer",
    "ingress.yaml": "apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ecommerce-ingress\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/rewrite-target: /\nspec:\n  rules:\n    - host: example.com\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: ecommerce-frontend-service\n                port:\n                  number: 80"
  },
  "deployment_guide": "1.  **Set up Kubernetes Cluster:** Ensure you have a Kubernetes cluster running and kubectl configured.\n2.  **Create Secrets:** Create Kubernetes secrets for database credentials and any other sensitive information.\n3.  **Configure Docker Hub:** Replace `<dockerhub_username>` in the deployment.yaml with your Docker Hub username.\n4.  **Set up GitHub Secrets:** In your GitHub repository, add the following secrets:\n    *   `DOCKERHUB_USERNAME`: Your Docker Hub username.\n    *   `DOCKERHUB_TOKEN`: Your Docker Hub access token.\n    *   `K8S_CONFIG`: Base64 encoded Kubernetes configuration file.\n5.  **Apply Kubernetes Manifests:** Run `kubectl apply -f k8s_manifests/deployment.yaml`, `kubectl apply -f k8s_manifests/service.yaml`, and `kubectl apply -f k8s_manifests/ingress.yaml` to deploy the application.\n6.  **Monitor Deployment:** Monitor the deployment using `kubectl get deployments`, `kubectl get services`, and `kubectl get ingress`.\n7.  **Access Application:** Access the application through the Ingress controller's external IP or hostname."
}